#+TITLE: Microprocessor Design for Testing (DFT)
#+date: <2021-10-06 Wed>
#+filetags: hardware testing

Let's delve a little bit into the physical world. Let's say we are to build a microprocessor, kind of like Intel. We will be spending crazy amounts of money to build millions of microprocessors. Before doing all of this, how do we make sure that our design actually works?

* Design for Testing

Design for Testing, better known as DFT, is the concept of slightly modifying a hardware to allow for better testing. This process is done in many steps throughout the whole manufacturing cycle, from its inception and logical synthesis up to the physical synthesis.

DFT, however, isn't exactly made for testing functionality. The main idea is to guarantee that the circuit has been assembled correctly from the low-level building blocks specified in a /structural netlist/[fn:1], making sure that all specified logic gates are present, operating correctly, connected correctly, and the specified constraints make sense. The idea of functional correctness, perhaps more familliar to our software-like minds, isn't present here. We are not testing inputs and outputs of a function, we are confirming that our design is correct and following the laws of physics.

* A Practical Example

Let's take a look at this VHDL snippet:
#+begin_src
:
#+end_src





[fn:1]description of the connectivity of an electronic circuit
